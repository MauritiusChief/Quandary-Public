package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, TIMES, LPAREN, RPAREN, RETURN, SEMICOL, IF, ELSE, PRINT, LBRACE, RBRACE, COMMA, INT;
terminal LE, GE, EQ, NE, LT, GT, AND, OR, NOT;
terminal Long    INTCONST;
terminal String  IDENT;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal UnaryExpr       unaryExpr;
non terminal ExprList        exprList;
non terminal NeExprList      neExprList;
non terminal FuncDefList     funcDefList;
non terminal FuncDef         funcDef;
non terminal VarDecl         varDecl;
non terminal Type            type;
non terminal FormalDeclList  formalDeclList;
non terminal NeFormalDeclList     neFormalDeclList;
non terminal Stmt            stmt;
non terminal StmtList        stmtList;
non terminal Cond            cond;

precedence left AND, OR;
precedence right NOT;
precedence left EQ, NE, LE, GE, LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left ELSE;

start with program;

program ::= funcDefList:f
            {: RESULT = new Program(f, loc(fleft, fright)); :}
            ;

funcDefList ::= funcDef:f funcDefList:fl
               {: RESULT = new FuncDefList(f, loc(fleft, fright)); :}
            | /* epsilon */
               {: RESULT = null :}
            ;

funcDef ::= varDecl:v LPAREN formalDeclList:fl RPAREN LBRACE stmtList:sl RBRACE
            {: RESULT = new FuncDef(v, fl, sl, loc(vleft, slright)); :}
            ;

formalDeclList ::= neFormalDeclList:nfl
               | /* epsilon */;

neFormalDeclList ::= varDecl COMMA neFormalDeclList
                  | varDecl;

varDecl ::= INT IDENT:i
            {: RESULT = new VarDecl(i, loc(ileft,iright)); :}
            ;

stmtList ::= stmt stmtList
         | /* epsilon */;

stmt ::= varDecl EQ expr SEMICOL
      | IF LPAREN cond RPAREN stmt
      | IF LPAREN cond RPAREN stmt ELSE stmt
      | PRINT expr SEMICOL
      | RETURN expr SEMICOL
      | LBRACE stmtList RBRACE
      ;

cond ::= expr:e1 LE expr:e2
         {: RESULT = new CondExpr(e1, CondExpr.LE, e2, loc(e1left, e1right)); :}
      | expr:e1 GE expr:e2
         {: RESULT = new CondExpr(e1, CondExpr.GE, e2, loc(e1left, e1right)); :}
      | expr:e1 EQ expr:e2
         {: RESULT = new CondExpr(e1, CondExpr.EQ, e2, loc(e1left, e1right)); :}
      | expr:e1 NE expr:e2
         {: RESULT = new CondExpr(e1, CondExpr.NE, e2, loc(e1left, e1right)); :}
      | expr:e1 LT expr:e2
         {: RESULT = new CondExpr(e1, CondExpr.LT, e2, loc(e1left, e1right)); :}
      | expr:e1 GT expr:e2
         {: RESULT = new CondExpr(e1, CondExpr.GT, e2, loc(e1left, e1right)); :}
      | cond:c1 AND cond:c2
         {: RESULT = new CondExpr(c1, CondExpr.AND, c2, loc(e1left, e1right)); :}
      | cond:c1 OR cond:c2
         {: RESULT = new CondExpr(c1, CondExpr.OR, c2, loc(e1left, e1right)); :}
      | NOT cond:c
      | LPAREN cond:c RPAREN
      ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  unaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;

unaryExpr ::= MINUS expr:e
               {: RESULT = new UnaryExpr(e, UnaryExpr.NEGATE, loc(eleft, eright)); :}
            ;
